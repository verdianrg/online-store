// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// History history
//
// swagger:model History
type History struct {
	ModelID

	ModelLogTime

	HistoryData

	// user
	User *User `json:"user,omitempty"`

	// user ID
	UserID int64 `json:"userID,omitempty" gorm:"type:integer"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *History) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ModelID
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ModelID = aO0

	// AO1
	var aO1 ModelLogTime
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.ModelLogTime = aO1

	// AO2
	var aO2 HistoryData
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.HistoryData = aO2

	// AO3
	var dataAO3 struct {
		User *User `json:"user,omitempty"`

		UserID int64 `json:"userID,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	m.User = dataAO3.User

	m.UserID = dataAO3.UserID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m History) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.ModelID)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.ModelLogTime)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.HistoryData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)
	var dataAO3 struct {
		User *User `json:"user,omitempty"`

		UserID int64 `json:"userID,omitempty"`
	}

	dataAO3.User = m.User

	dataAO3.UserID = m.UserID

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this history
func (m *History) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelID
	if err := m.ModelID.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelLogTime
	if err := m.ModelLogTime.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HistoryData
	if err := m.HistoryData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this history based on the context it is used
func (m *History) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ModelID
	if err := m.ModelID.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ModelLogTime
	if err := m.ModelLogTime.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HistoryData
	if err := m.HistoryData.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *History) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *History) UnmarshalBinary(b []byte) error {
	var res History
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
