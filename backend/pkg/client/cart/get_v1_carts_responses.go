// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"online-store/gen/models"
)

// GetV1CartsReader is a Reader for the GetV1Carts structure.
type GetV1CartsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1CartsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1CartsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetV1CartsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetV1CartsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetV1CartsOK creates a GetV1CartsOK with default headers values
func NewGetV1CartsOK() *GetV1CartsOK {
	return &GetV1CartsOK{}
}

/*
GetV1CartsOK describes a response with status code 200, with default header values.

success get carts list data
*/
type GetV1CartsOK struct {
	Payload *GetV1CartsOKBody
}

// IsSuccess returns true when this get v1 carts o k response has a 2xx status code
func (o *GetV1CartsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 carts o k response has a 3xx status code
func (o *GetV1CartsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 carts o k response has a 4xx status code
func (o *GetV1CartsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 carts o k response has a 5xx status code
func (o *GetV1CartsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 carts o k response a status code equal to that given
func (o *GetV1CartsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 carts o k response
func (o *GetV1CartsOK) Code() int {
	return 200
}

func (o *GetV1CartsOK) Error() string {
	return fmt.Sprintf("[GET /v1/carts][%d] getV1CartsOK  %+v", 200, o.Payload)
}

func (o *GetV1CartsOK) String() string {
	return fmt.Sprintf("[GET /v1/carts][%d] getV1CartsOK  %+v", 200, o.Payload)
}

func (o *GetV1CartsOK) GetPayload() *GetV1CartsOKBody {
	return o.Payload
}

func (o *GetV1CartsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1CartsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CartsUnauthorized creates a GetV1CartsUnauthorized with default headers values
func NewGetV1CartsUnauthorized() *GetV1CartsUnauthorized {
	return &GetV1CartsUnauthorized{}
}

/*
GetV1CartsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetV1CartsUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 carts unauthorized response has a 2xx status code
func (o *GetV1CartsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 carts unauthorized response has a 3xx status code
func (o *GetV1CartsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 carts unauthorized response has a 4xx status code
func (o *GetV1CartsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 carts unauthorized response has a 5xx status code
func (o *GetV1CartsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 carts unauthorized response a status code equal to that given
func (o *GetV1CartsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v1 carts unauthorized response
func (o *GetV1CartsUnauthorized) Code() int {
	return 401
}

func (o *GetV1CartsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/carts][%d] getV1CartsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1CartsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/carts][%d] getV1CartsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1CartsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1CartsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1CartsDefault creates a GetV1CartsDefault with default headers values
func NewGetV1CartsDefault(code int) *GetV1CartsDefault {
	return &GetV1CartsDefault{
		_statusCode: code,
	}
}

/*
GetV1CartsDefault describes a response with status code -1, with default header values.

error
*/
type GetV1CartsDefault struct {
	_statusCode int

	Payload *models.BaseResponse
}

// IsSuccess returns true when this get v1 carts default response has a 2xx status code
func (o *GetV1CartsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get v1 carts default response has a 3xx status code
func (o *GetV1CartsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get v1 carts default response has a 4xx status code
func (o *GetV1CartsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get v1 carts default response has a 5xx status code
func (o *GetV1CartsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get v1 carts default response a status code equal to that given
func (o *GetV1CartsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get v1 carts default response
func (o *GetV1CartsDefault) Code() int {
	return o._statusCode
}

func (o *GetV1CartsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/carts][%d] GetV1Carts default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1CartsDefault) String() string {
	return fmt.Sprintf("[GET /v1/carts][%d] GetV1Carts default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1CartsDefault) GetPayload() *models.BaseResponse {
	return o.Payload
}

func (o *GetV1CartsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1CartsOKBody get v1 carts o k body
swagger:model GetV1CartsOKBody
*/
type GetV1CartsOKBody struct {

	// data
	Data []*models.Cart `json:"data"`

	// metadata
	Metadata *models.Pagination `json:"metadata,omitempty"`
}

// Validate validates this get v1 carts o k body
func (o *GetV1CartsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1CartsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1CartsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1CartsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetV1CartsOKBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1CartsOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1CartsOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get v1 carts o k body based on the context it is used
func (o *GetV1CartsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1CartsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1CartsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1CartsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetV1CartsOKBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1CartsOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1CartsOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1CartsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1CartsOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1CartsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
