// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"online-store/gen/models"
)

// GetV1UserIDReader is a Reader for the GetV1UserID structure.
type GetV1UserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1UserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1UserIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetV1UserIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetV1UserIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetV1UserIDOK creates a GetV1UserIDOK with default headers values
func NewGetV1UserIDOK() *GetV1UserIDOK {
	return &GetV1UserIDOK{}
}

/*
GetV1UserIDOK describes a response with status code 200, with default header values.

success get user detail
*/
type GetV1UserIDOK struct {
	Payload *GetV1UserIDOKBody
}

// IsSuccess returns true when this get v1 user Id o k response has a 2xx status code
func (o *GetV1UserIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 user Id o k response has a 3xx status code
func (o *GetV1UserIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 user Id o k response has a 4xx status code
func (o *GetV1UserIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 user Id o k response has a 5xx status code
func (o *GetV1UserIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 user Id o k response a status code equal to that given
func (o *GetV1UserIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 user Id o k response
func (o *GetV1UserIDOK) Code() int {
	return 200
}

func (o *GetV1UserIDOK) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getV1UserIdOK  %+v", 200, o.Payload)
}

func (o *GetV1UserIDOK) String() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getV1UserIdOK  %+v", 200, o.Payload)
}

func (o *GetV1UserIDOK) GetPayload() *GetV1UserIDOKBody {
	return o.Payload
}

func (o *GetV1UserIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1UserIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1UserIDUnauthorized creates a GetV1UserIDUnauthorized with default headers values
func NewGetV1UserIDUnauthorized() *GetV1UserIDUnauthorized {
	return &GetV1UserIDUnauthorized{}
}

/*
GetV1UserIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetV1UserIDUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 user Id unauthorized response has a 2xx status code
func (o *GetV1UserIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 user Id unauthorized response has a 3xx status code
func (o *GetV1UserIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 user Id unauthorized response has a 4xx status code
func (o *GetV1UserIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 user Id unauthorized response has a 5xx status code
func (o *GetV1UserIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 user Id unauthorized response a status code equal to that given
func (o *GetV1UserIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v1 user Id unauthorized response
func (o *GetV1UserIDUnauthorized) Code() int {
	return 401
}

func (o *GetV1UserIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getV1UserIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1UserIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] getV1UserIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1UserIDUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1UserIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1UserIDDefault creates a GetV1UserIDDefault with default headers values
func NewGetV1UserIDDefault(code int) *GetV1UserIDDefault {
	return &GetV1UserIDDefault{
		_statusCode: code,
	}
}

/*
GetV1UserIDDefault describes a response with status code -1, with default header values.

error
*/
type GetV1UserIDDefault struct {
	_statusCode int

	Payload *models.BaseResponse
}

// IsSuccess returns true when this get v1 user ID default response has a 2xx status code
func (o *GetV1UserIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get v1 user ID default response has a 3xx status code
func (o *GetV1UserIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get v1 user ID default response has a 4xx status code
func (o *GetV1UserIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get v1 user ID default response has a 5xx status code
func (o *GetV1UserIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get v1 user ID default response a status code equal to that given
func (o *GetV1UserIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get v1 user ID default response
func (o *GetV1UserIDDefault) Code() int {
	return o._statusCode
}

func (o *GetV1UserIDDefault) Error() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] GetV1UserID default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1UserIDDefault) String() string {
	return fmt.Sprintf("[GET /v1/user/{id}][%d] GetV1UserID default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1UserIDDefault) GetPayload() *models.BaseResponse {
	return o.Payload
}

func (o *GetV1UserIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1UserIDOKBody get v1 user ID o k body
swagger:model GetV1UserIDOKBody
*/
type GetV1UserIDOKBody struct {

	// data
	Data *models.User `json:"data,omitempty"`
}

// Validate validates this get v1 user ID o k body
func (o *GetV1UserIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1UserIDOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1UserIdOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1UserIdOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get v1 user ID o k body based on the context it is used
func (o *GetV1UserIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1UserIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1UserIdOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1UserIdOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1UserIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1UserIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1UserIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
