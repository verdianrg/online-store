// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"online-store/gen/models"
)

// GetV1ProductsReader is a Reader for the GetV1Products structure.
type GetV1ProductsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1ProductsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1ProductsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetV1ProductsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetV1ProductsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetV1ProductsOK creates a GetV1ProductsOK with default headers values
func NewGetV1ProductsOK() *GetV1ProductsOK {
	return &GetV1ProductsOK{}
}

/*
GetV1ProductsOK describes a response with status code 200, with default header values.

success get product list data
*/
type GetV1ProductsOK struct {
	Payload *GetV1ProductsOKBody
}

// IsSuccess returns true when this get v1 products o k response has a 2xx status code
func (o *GetV1ProductsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 products o k response has a 3xx status code
func (o *GetV1ProductsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 products o k response has a 4xx status code
func (o *GetV1ProductsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 products o k response has a 5xx status code
func (o *GetV1ProductsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 products o k response a status code equal to that given
func (o *GetV1ProductsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 products o k response
func (o *GetV1ProductsOK) Code() int {
	return 200
}

func (o *GetV1ProductsOK) Error() string {
	return fmt.Sprintf("[GET /v1/products][%d] getV1ProductsOK  %+v", 200, o.Payload)
}

func (o *GetV1ProductsOK) String() string {
	return fmt.Sprintf("[GET /v1/products][%d] getV1ProductsOK  %+v", 200, o.Payload)
}

func (o *GetV1ProductsOK) GetPayload() *GetV1ProductsOKBody {
	return o.Payload
}

func (o *GetV1ProductsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV1ProductsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1ProductsUnauthorized creates a GetV1ProductsUnauthorized with default headers values
func NewGetV1ProductsUnauthorized() *GetV1ProductsUnauthorized {
	return &GetV1ProductsUnauthorized{}
}

/*
GetV1ProductsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetV1ProductsUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this get v1 products unauthorized response has a 2xx status code
func (o *GetV1ProductsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 products unauthorized response has a 3xx status code
func (o *GetV1ProductsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 products unauthorized response has a 4xx status code
func (o *GetV1ProductsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 products unauthorized response has a 5xx status code
func (o *GetV1ProductsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 products unauthorized response a status code equal to that given
func (o *GetV1ProductsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v1 products unauthorized response
func (o *GetV1ProductsUnauthorized) Code() int {
	return 401
}

func (o *GetV1ProductsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/products][%d] getV1ProductsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1ProductsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/products][%d] getV1ProductsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV1ProductsUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetV1ProductsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1ProductsDefault creates a GetV1ProductsDefault with default headers values
func NewGetV1ProductsDefault(code int) *GetV1ProductsDefault {
	return &GetV1ProductsDefault{
		_statusCode: code,
	}
}

/*
GetV1ProductsDefault describes a response with status code -1, with default header values.

error
*/
type GetV1ProductsDefault struct {
	_statusCode int

	Payload *models.BaseResponse
}

// IsSuccess returns true when this get v1 products default response has a 2xx status code
func (o *GetV1ProductsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get v1 products default response has a 3xx status code
func (o *GetV1ProductsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get v1 products default response has a 4xx status code
func (o *GetV1ProductsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get v1 products default response has a 5xx status code
func (o *GetV1ProductsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get v1 products default response a status code equal to that given
func (o *GetV1ProductsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get v1 products default response
func (o *GetV1ProductsDefault) Code() int {
	return o._statusCode
}

func (o *GetV1ProductsDefault) Error() string {
	return fmt.Sprintf("[GET /v1/products][%d] GetV1Products default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1ProductsDefault) String() string {
	return fmt.Sprintf("[GET /v1/products][%d] GetV1Products default  %+v", o._statusCode, o.Payload)
}

func (o *GetV1ProductsDefault) GetPayload() *models.BaseResponse {
	return o.Payload
}

func (o *GetV1ProductsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetV1ProductsOKBody get v1 products o k body
swagger:model GetV1ProductsOKBody
*/
type GetV1ProductsOKBody struct {

	// data
	Data []*models.Product `json:"data"`

	// metadata
	Metadata *models.Pagination `json:"metadata,omitempty"`
}

// Validate validates this get v1 products o k body
func (o *GetV1ProductsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1ProductsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1ProductsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1ProductsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetV1ProductsOKBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1ProductsOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1ProductsOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get v1 products o k body based on the context it is used
func (o *GetV1ProductsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV1ProductsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getV1ProductsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getV1ProductsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetV1ProductsOKBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {

		if swag.IsZero(o.Metadata) { // not required
			return nil
		}

		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV1ProductsOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getV1ProductsOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV1ProductsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV1ProductsOKBody) UnmarshalBinary(b []byte) error {
	var res GetV1ProductsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
